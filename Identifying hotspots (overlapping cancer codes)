#Replace pancreatic, PAED, PAEN
#Fix hotspots2.R for loop

#pancreatic_hotspots.sh
#!/bin/bash
source /oicr/local/Modules/default/init/bash
WKDIR=/.mounts/labs/awadallalab/private/ncheng/ctDNA_test/phase_panel/hotspots/pancreatic
#Change testing dir to run number
TESTINGDIR=$WKDIR/hotspots
CANCERDIR=/.mounts/labs/awadallalab/private/ncheng/vcfs/pcawg_vcfs
RDSDIR=$TESTINGDIR/cancer_RDS
cd $CANCERDIR
#Extracting target cancer vcfs
for f in PACA*; do mkdir -p $TESTINGDIR/pancreatic_vcfs/$f/vcf;done
for f in PACA*/vcf/*.gz; do zcat $f | awk '{if($0 !~ /^#/) print "chr"$0; else print $0}' > $TESTINGDIR/pancreatic_vcfs/$f.txt; done
for f in PAEN*; do mkdir -p $TESTINGDIR/pancreatic_vcfs/$f/vcf;done
for f in PAEN*/vcf/*.gz; do zcat $f | awk '{if($0 !~ /^#/) print "chr"$0; else print $0}' > $TESTINGDIR/pancreatic_vcfs/$f.txt; done
cd $TESTINGDIR/pancreatic_vcfs
source /.mounts/labs/awadallalab/private/ncheng/softwares/onc_env/bin/activate
for g in */vcf/*.txt; do oncotator --db-dir /.mounts/labs/awadallalab/private/ncheng/softwares/oncotator_v1_ds_April052016 -v --input_format=VCF --output_format=TCGAMAF $g $g.maf.annotated hg19; done
for f in */vcf/*.maf.annotated; do sed '/^#/ d' $f | cut -f1,5,6,7,9 > $TESTINGDIR/pancreatic_vcfs/$f.cut_final.txt; done
deactivate
rm oncotator.log
source /oicr/local/Modules/default/init/bash
module load R/3.4.0
cd $WKDIR
mkdir $RDSDIR
./pancreatic_hotspots.R
mv $TESTINGDIR/pancreatic_vcfs/*/vcf/*.RDS $RDSDIR
cd $TESTINGDIR
mkdir all_RDS
cp $RDSDIR/*.RDS all_RDS --remove-destination
cd $WKDIR
./pancreatic_hotspots2.R

####pancreatic_hotspots.R####
#!/usr/bin/env Rscript
setwd('/.mounts/labs/awadallalab/private/ncheng/ctDNA_test/phase_panel/hotspots/pancreatic/hotspots/pancreatic_vcfs')
parent_d = getwd()
cancers = list.files()
for (i in 1:length(cancers)) {
  tmp2 = paste(parent_d, cancers[i], 'vcf', sep = '/')
  tmp1 = paste('/.mounts/labs/awadallalab/private/ncheng/vcfs/pcawg_vcfs', cancers[i], 'vcf', sep = '/')
  setwd(tmp1)
  tmp3 = length(list.files()) - 1
  setwd(tmp2)
  if (length(list.files(pattern = '*.cut_final.txt$')) > 0) {
    gene_files = list.files(pattern = '*.cut_final.txt$')
    gene_data = lapply(gene_files, function(x) {
      tmp <- try(PAEN.table(x, head = T, stringsAsFactors = F, sep = '\t', fill = F, quote=""))
      if(inherits(tmp, 'try-error')) {
        return(data.frame(matrix(nrow=0, ncol = 5))) 
      } else {
        return(tmp)
      }
    })
    if (length(gene_data) < tmp3) {
      tmp_df = data.frame(matrix(ncol = 5, nrow = 0))
      tmp_no = length(gene_data) + 1
      tmp_no1 = length(gene_data) + (tmp3 - length(gene_data))
      for (j in tmp_no:tmp_no1) {
        gene_data[[j]] = tmp_df
      }
    }
    for (k in 1:length(gene_data)) {
      gene_data[[k]] = gene_data[[k]][,c(2,3,1,5)]
      colnames(gene_data[[k]]) = c('chrom', 'pos', 'symbol', 'variant_classification')
      gene_data[[k]]$chrom = sub("^", "chr", gene_data[[k]]$chrom )
    }
    file = paste(as.character(cancers[i]),'.RDS', sep = '')
    saveRDS(gene_data, file) 
  }
}

#####pancreatic_hotspots2.R#####
#####pancreatic_hotspots2.R#####
#!/usr/bin/env Rscript
setwd('/.mounts/labs/awadallalab/private/ncheng/ctDNA_test/phase_panel/hotspots/pancreatic/hotspots/all_RDS')
require(data.table)
files = list.files(pattern = '*.-.*')
dat_list = lapply(files, function (x) readRDS(x))
save = 'pancreatic_hotspot.RData'
save.image(save)

#Dat_list reformatting
for(i in 1:length(dat_list)) {
  for (j in 1:length(dat_list[[i]])) {
    dat_list[[i]][[j]] = cbind(dat_list[[i]][[j]], rep(gsub('-.*', '', gsub('.RDS', '', files[i])),nrow(dat_list[[i]][[j]])) ,rep(1, nrow(dat_list[[i]][[j]])))
    colnames(dat_list[[i]][[j]])[6] = paste(gsub('.RDS', '', files[i]), 'Sample', as.character(j), sep = '_') 
    colnames(dat_list[[i]][[j]])[5] = 'cancer'
    dat_list[[i]][[j]] = dat_list[[i]][[j]][,-5]
  }
}
save.image(save)

#Restructuring dat_list
PACA_list = dat_list[[1]][[1]]
PAEN_list = dat_list[[3]][[1]]
for (i in 2:length(dat_list[[1]])) {
 PACA_list = merge(PACA_list, dat_list[[1]][[i]], by = c('chrom', 'pos','symbol', 'variant_classification'), all = TRUE)
}
save.image(save)

for (i in 1:length(dat_list[[2]])) {
 PACA_list = merge(PACA_list, dat_list[[2]][[i]], by = c('chrom', 'pos','symbol', 'variant_classification'), all = TRUE)
}

save.image(save)

for (i in 2:length(dat_list[[3]])) {
  PAEN_list = merge(PAEN_list, dat_list[[3]][[i]], by = c('chrom', 'pos','symbol', 'variant_classification'), all = TRUE)
}
for (i in 1:length(dat_list[[4]])) {
 PACA_list = merge(PACA_list, dat_list[[4]][[i]], by = c('chrom', 'pos','symbol', 'variant_classification'), all = TRUE)
}


PACA_list[is.na(PACA_list)] <- 0
PACA_list[,1] = gsub('chr','',PACA_list[,1])
PAEN_list[is.na(PAEN_list)] <- 0
PAEN_list[,1] = gsub('chr','',PAEN_list[,1])

saveRDS(PACA_list, 'PACA_list.RDS')
saveRDS(PAEN_list, 'PAEN_list.RDS')

save.image(save)

#Identifying hotspots
hotspots <- function (data = NULL, chr = NULL, position, max = 5000, RI = 30, min_occur = 1) {
  arguments <- as.list(match.call())
  position = eval(arguments$position, data)
  chr = eval(arguments$chr, data)
  samples = data[,-c(1,2)]
  if (is.null(chr) == TRUE) {
    chr <- c(rep("N", length(position)))
  }
  chr <- factor(chr, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 
                                10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, "X", 
                                "Y", "M", "N"), ordered = TRUE)
  z <- data.frame(chr, position, samples)
  z <- z[order(chr, position), ]
  y <- data.frame(chr = character(), pend = integer(), pstart = integer(), 
                  nend = integer(), nstart = integer(), recurrence_index = numeric(), stringsAsFactors = FALSE)
  for (k in 1:length(levels(z$chr))) {
    x <- subset(z, chr == levels(z$chr)[k])[,-1]
    w <- data.frame(chr = character(), pend = integer(), pstart = integer(), nend = integer(), nstart = integer(), recurrence_index = numeric(), stringsAsFactors = FALSE)
    start_index = 1
    while (start_index <= nrow(x)) {
      m = 0 
      start_ind = start_index
      start_index = start_index + 1
      for (i in start_ind:nrow(x)) {
        bp_length = x[i,1] - x[start_ind,1]
        if (bp_length <= max) {
          tmp_df = x[start_ind:i,][,-1]
          sample_sum = colSums(tmp_df)
          rec_ind = length(sample_sum[which(sample_sum >= min_occur)])/length(sample_sum)
          if (rec_ind >= RI & m == 0) {
            w[1, 1] <- levels(z$chr)[k]
            w[1, 2] <- x[i, 1]
            w[1, 3] <- x[start_ind, 1]
            w[1, 4] <- i
            w[1, 5] <- start_ind
            w[1, 6] <- rec_ind
            m <- 1
          } 
          else if (rec_ind >= RI & m == 1) {
            w[1, 2] <- x[i, 1]
            w[1, 4] <- i
            w[1, 6]  <- rec_ind
          }
        }
      }
      if (nrow(w) > 0) {
        y = rbind(y, w)
      }
    }
    y$distance = y[, 2] - y[, 3]
    y$n_positions = y[, 4] - y[, 5] + 1
    return(y)
  }
}
PACA_hotspot_250 = hotspots(data = PACA_list[,-c(3,4)], chr = chrom, position = pos, max = 250, RI = 0.20)
save.image(save)
saveRDS(PACA_hotspot_250, 'PACA_hotspot_250.RDS')

exon_filt <- function(snv_list) {
  snv_list_exons = snv_list[which(snv_list[,4] %in% c('De_novo_Start_InFrame', 'De_novo_Start_OutOfFrame', 'Missense_Mutation', 'Nonsense_Mutation', 'Nonstop_Mutation', 'Start_Codon_SNP')),]
  return(snv_list_exons)
}
PACA_list_exon = exon_filt(PACA_list)
PACA_exon_hotspot_250 = hotspots(data = PACA_list_exon[,-c(3,4)], chr = chrom, position = pos, max = 250, RI = 0.1)
save.image(save)
saveRDS(PACA_hotspot_exon_250, 'PACA_hotspot_exon_250.RDS')
save.image(save)



#Hotspot position
hotspot_coordinates <- function(pancreatic_exon_hotspots, snv_list) {
  exon_hotspot_pos = data.frame(matrix(ncol = 2, nrow = 0))
  num = 0
  for (i in 1:nrow(pancreatic_exon_hotspots)) {
    tmp_vector = seq(pancreatic_exon_hotspots[i,3], pancreatic_exon_hotspots[i,2], 1)
    num2 = num + length(tmp_vector)
    exon_hotspot_pos[(num+1):num2,1] = as.character(pancreatic_exon_hotspots[i,1])
    exon_hotspot_pos[(num+1):num2,2] = tmp_vector
    num = num2
  }
  colnames(exon_hotspot_pos) = c('chrom','pos')
  tmp1 = snv_list
  require(dplyr)
  tmp1 = semi_join(snv_list, exon_hotspot_pos, by = c('chrom','pos'))
  return(tmp1)
}

exon_hotspot_snv_list = hotspot_coordinates(pancreatic_exon_hotspots, snv_list_exons)
saveRDS(exon_hotspot_snv_list, 'exon_hotspot_snv_list.RDS') 

#Sample count
sample_count <- function(snv_list, threshold) {
  tmp_df = snv_list[,1:4]
  hotspot_genes = table(tmp_df[,3])
  tmp_df1 = data.frame(matrix(ncol =3, nrow = length(hotspot_genes)))
  tmp_df1[,1] = data.frame(hotspot_genes)[,1]
  for (i in 1:length(hotspot_genes)) {
    tmp1 = snv_list[which(snv_list[,3] == data.frame(hotspot_genes)[i,1]),]
    tmp2 = colSums(tmp1[,-c(1:4)])
    tmp_df1[i,2] = length(which(tmp2 >= threshold))
    tmp_df1[i,3] = tmp_df1[i,2]/ncol(snv_list[,-c(1:4)])
  }
  return(tmp_df1)
}
exon_hotspot_samples = sample_count(exon_hotspot_snv_list, 1)
saveRDS(exon_hotspot_samples, 'exon_hotspot_samples.RDS')

save.image('pancreatic_exon_hotspot.RData')


#Parallel
#!/usr/bin/env Rscript
#Identifying hotspots
setwd('/.mounts/labs/awadallalab/private/ncheng/ctDNA_test/phase_panel/hotspots/pancreatic/hotspots/all_RDS')
save = 'pancreatic_hotspot_1.RData'
PAEN_list = readRDS('PAEN_list.RDS')
save.image(save)
hotspots <- function (data = NULL, chr = NULL, position, max = 5000, RI = 30, min_occur = 1) {
  arguments <- as.list(match.call())
  position = eval(arguments$position, data)
  chr = eval(arguments$chr, data)
  samples = data[,-c(1,2)]
  if (is.null(chr) == TRUE) {
    chr <- c(rep("N", length(position)))
  }
  chr <- factor(chr, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 
                                10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, "X", 
                                "Y", "M", "N"), ordered = TRUE)
  z <- data.frame(chr, position, samples)
  z <- z[order(chr, position), ]
  y <- data.frame(chr = character(), pend = integer(), pstart = integer(), 
                  nend = integer(), nstart = integer(), recurrence_index = numeric(), stringsAsFactors = FALSE)
  for (k in 1:length(levels(z$chr))) {
    x <- subset(z, chr == levels(z$chr)[k])[,-1]
    w <- data.frame(chr = character(), pend = integer(), pstart = integer(), nend = integer(), nstart = integer(), recurrence_index = numeric(), stringsAsFactors = FALSE)
    start_index = 1
    while (start_index <= nrow(x)) {
      m = 0 
      start_ind = start_index
      start_index = start_index + 1
      for (i in start_ind:nrow(x)) {
        bp_length = x[i,1] - x[start_ind,1]
        if (bp_length <= max) {
          tmp_df = x[start_ind:i,][,-1]
          sample_sum = colSums(tmp_df)
          rec_ind = length(sample_sum[which(sample_sum >= min_occur)])/length(sample_sum)
          if (rec_ind >= RI & m == 0) {
            w[1, 1] <- levels(z$chr)[k]
            w[1, 2] <- x[i, 1]
            w[1, 3] <- x[start_ind, 1]
            w[1, 4] <- i
            w[1, 5] <- start_ind
            w[1, 6] <- rec_ind
            m <- 1
          } 
          else if (rec_ind >= RI & m == 1) {
            w[1, 2] <- x[i, 1]
            w[1, 4] <- i
            w[1, 6]  <- rec_ind
          }
        }
      }
      if (nrow(w) > 0) {
        y = rbind(y, w)
      }
    }
    y$distance = y[, 2] - y[, 3]
    y$n_positions = y[, 4] - y[, 5] + 1
    return(y)
  }
}

PAEN_hotspot_250 = hotspots(data = PAEN_list[,-c(3,4)], chr = chrom, position = pos, max = 250, RI = 0.20)
saveRDS(PAEN_hotspot_250, 'PAEN_hotspot_250.RDS')
save.image(save)

exon_filt <- function(snv_list) {
  snv_list_exons = snv_list[which(snv_list[,4] %in% c('De_novo_Start_InFrame', 'De_novo_Start_OutOfFrame', 'Missense_Mutation', 'Nonsense_Mutation', 'Nonstop_Mutation', 'Start_Codon_SNP')),]
  return(snv_list_exons)
}

PAEN_list_exon = exon_filt(PAEN_list)
PAEN_exon_hotspot_250 = hotspots(data = PAEN_list_exon[,-c(3,4)], chr = chrom, position = pos, max = 250, RI = 0.1)
saveRDS(PAEN_exon_hotspot_250, 'PAEN_exon_hotspot_250.RDS')
save.image(save)

